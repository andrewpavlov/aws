AWSTemplateFormatVersion: '2010-09-09'
Description: Deploy 2 S3 Lambda

Parameters:
  SourceBucketName:
    AllowedPattern: '^[0-9a-zA-Z]+([0-9a-zA-Z-]*[0-9a-zA-Z])*$'
    Default: andrewpavlov-public-resources
    Type: String
  LambdaKeyPrefix:
    AllowedPattern: '^[0-9a-zA-Z-/]*$'
    Default: lambda/
    Type: String

Resources:
  LambdaZipsBucket:
    Type: AWS::S3::Bucket

  CopyLambdaZips:
    Type: AWS::CloudFormation::CustomResource
    Properties:
      ServiceToken: !GetAtt CopyZipsFunction.Arn
      DestBucket: !Ref LambdaZipsBucket
      SourceBucket: !Ref SourceBucketName
      Prefix: !Ref LambdaKeyPrefix
      Objects:
        - deploy-to-s3.zip

  DeployToS3LambdaRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          -
            Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - 'sts:AssumeRole'
      Path: '/'
      Policies:
        -
          PolicyName: !Sub ${AWS::StackName}-lambda-policy
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              -
                Effect: Allow
                Action:
                  - 'logs:DescribeLogGroups'
                  - 'logs:CreateLogGroup'
                  - 'logs:CreateLogStream'
                  - 'logs:PutLogEvents'
                  - 's3:*'
                  - 'lambda:*'
                  - 'codepipeline:PutJobSuccessResult'
                  - 'codepipeline:PutJobFailureResult'
                Resource: '*'

  DeployToS3Lambda:
    Type: AWS::Lambda::Function
    DependsOn: CopyLambdaZips
    Properties:
      Handler: index.lambda_handler 
      Runtime: python2.7
      MemorySize: 128
      Timeout: 60
      Role: !GetAtt DeployToS3LambdaRole.Arn
      Code:
        S3Bucket: !Ref LambdaZipsBucket
        S3Key: !Sub ${LambdaKeyPrefix}deploy-to-s3.zip

  CopyZipsRole:
    Type: 'AWS::IAM::Role'
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: 'sts:AssumeRole'
      Path: /
      Policies:
        - PolicyName: !Sub ${AWS::StackName}-czr-policy
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - 's3:GetObject'
                Resource:
                  - !Sub 'arn:aws:s3:::${SourceBucketName}/*'
              - Effect: Allow
                Action:
                  - 's3:PutObject'
                  - 's3:DeleteObject'
                Resource:
                  - !Sub 'arn:aws:s3:::${LambdaZipsBucket}/*'

  CopyZipsFunction:
    Type: 'AWS::Lambda::Function'
    Properties:
      Description: Copies objects from a source S3 bucket to a destination
      Handler: index.handler
      Runtime: python2.7
      Role: !GetAtt CopyZipsRole.Arn
      Timeout: 240
      Code:
        ZipFile: !Sub | 
          import json
          import logging
          import threading
          import boto3
          import cfnresponse
           
          def copy_objects(source_bucket, dest_bucket, prefix, objects):
              s3 = boto3.client('s3')
              for o in objects:
                  fv = o.split('?VersionId=')
                  key = prefix + fv[0]
                  copy_source = {
                      'Bucket': source_bucket,
                      'Key': key
                  }
                  if len(fv) > 1:
                      copy_source['VersionId'] = fv[1]
                  s3.copy_object(CopySource=copy_source, Bucket=dest_bucket, Key=key)
          
          
          def delete_objects(bucket, prefix, objects):
              s3 = boto3.client('s3')
              objects = {'Objects': [{'Key': prefix + o} for o in objects]}
              s3.delete_objects(Bucket=bucket, Delete=objects)
          
          
          def timeout(event, context):
              logging.error('Execution is about to time out, sending failure response to CloudFormation')
              cfnresponse.send(event, context, cfnresponse.FAILED, {}, None)
          
          
          def handler(event, context):
              # make sure we send a failure to CloudFormation if the function is going to timeout
              timer = threading.Timer((context.get_remaining_time_in_millis() / 1000.00) - 0.5, timeout, args=[event, context])
              timer.start()
          
              print('Received event: %s' % json.dumps(event))
              status = cfnresponse.SUCCESS
              try:
                  source_bucket = event['ResourceProperties']['SourceBucket']
                  dest_bucket = event['ResourceProperties']['DestBucket']
                  prefix = event['ResourceProperties']['Prefix']
                  objects = event['ResourceProperties']['Objects']
                  if event['RequestType'] == 'Delete':
                      delete_objects(dest_bucket, prefix, objects)
                  else:
                      copy_objects(source_bucket, dest_bucket, prefix, objects)
              except Exception as e:
                  logging.error('Exception: %s' % e, exc_info=True)
                  status = cfnresponse.FAILED
              finally:
                  timer.cancel()
                  cfnresponse.send(event, context, status, {}, None)
Outputs:
  OutputBucketName:
    Value: !Ref DeployToS3Lambda
    Export:
      Name: !Sub ${AWS::StackName}
