AWSTemplateFormatVersion: '2010-09-09'
Description: Launch configuration

Parameters:
  Project:
    Description: Project name
    Type: String
  KeyPair:
    Description: Key pair for access to EC2 by SSH
    Type: String

Resources:
  UbuntuNode:
    Type: AWS::AutoScaling::LaunchConfiguration
    Properties:
      ImageId: ami-da05a4a0
      IamInstanceProfile:
        Fn::ImportValue:
          !Sub ${Project}-ec2-res-ip
      SecurityGroups:
        - Fn::ImportValue:
            !Sub ${Project}-ec2-res-sg
      InstanceType: t2.micro
      KeyName: 
        Ref: KeyPair
      UserData:
        Fn::Base64: !Sub |
          #!/bin/bash
          apt-get update -y
          
          # Install main packages
          apt-get install -y ruby wget
          curl -sL https://deb.nodesource.com/setup_8.x | bash -
          apt-get install -y -qq nodejs
          npm install -g db-migrate db-migrate-mysql

          apt-get install -y jq
          apt-get install -y libcairo2-dev libjpeg8-dev libpango1.0-dev libgif-dev

          apt-get install -y default-jre

          apt-get install -y python2.7 python-pip
          pip install --upgrade awscli
          aws --version

          # Load parameters
          echo "Load parameters..."
          value=`aws ssm get-parameter --name ${AWS::StackName} --query "Parameter.Value" --output text --region ${AWS::Region}`
          IFS=$'\n'; pairs=($value); unset IFS;
          for i in "${!pairs[@]}"; do
            IFS=$'='; kv=($i); unset IFS;
            k=${!kv[0]}
            v=`node -pe "'$i'.replace(/[^=]+=/, '')"`
            echo $k="$v"
            declare $k="$v"
          done
          echo "...done"

          # Route53
          echo "Configure Route53"
          if [[ ! -z "$Domain"  &&  ! -z "$SubDomain" ]]; then
            HostedZoneId=$(aws route53 list-hosted-zones | jq -r --arg name $Domain. '.HostedZones[] | select(.Name == $name and .Config.PrivateZone == false) | .Id | ltrimstr("/hostedzone/")')
            PublicIpAddr=$(curl -s http://169.254.169.254/latest/meta-data/public-hostname)
            echo "{ \
                \"Comment\": \"Update record to ec2 instance\", \
                \"Changes\": [ \
                    { \
                        \"Action\": \"UPSERT\", \
                        \"ResourceRecordSet\": { \
                            \"Name\": \"$SubDomain.$Domain.\", \
                            \"Type\": \"CNAME\", \
                            \"TTL\": 300, \
                            \"ResourceRecords\": [ \
                                { \
                                    \"Value\": \"$PublicIpAddr\" \
                                } \
                            ] \
                        } \
                    } \
                ] \
            }" > /tmp/RecordsChanges

            aws route53 change-resource-record-sets \
            --hosted-zone-id $HostedZoneId \
            --change-batch file:///tmp/RecordsChanges
          fi

          # My SQL
          echo "Configure MySQL"
          if [[ ! -z "$MyPassword" ]]; then
            add-apt-repository 'deb http://archive.ubuntu.com/ubuntu trusty universe'
            apt-get update -y
            debconf-set-selections <<< "mysql-server-5.7 mysql-server/root_password password $MyPassword"
            debconf-set-selections <<< "mysql-server-5.7 mysql-server/root_password_again password $MyPassword"
            apt install mysql-server-5.7 -y
            sed -i 's/bind-address/bind-address = 0.0.0.0 #/g' /etc/mysql/mysql.conf.d/mysqld.cnf
            systemctl start mysql
            systemctl enable mysql
            if [[ ! -z "$MyUser" ]]; then
              mysql -uroot -p$MyPassword -e "GRANT ALL PRIVILEGES ON *.* TO '$MyUser'@'%' IDENTIFIED BY '$MyPassword';"
            fi
            if [[ ! -z "$MyDB" ]]; then
              mysql -u$MyUser -p$MyPassword -e "CREATE DATABASE IF NOT EXISTS \`$MyDB\` DEFAULT CHARACTER SET utf8"
            fi

            if [[ ! -z "$FromHost" ]]; then
              echo "...Migrate"
              WronConf=""
              if [[ -z "$FromPort" ]]; then
                FromPort=3306
              fi
              if [[ -z "$FromUser" ]]; then
                if [[ -z "$MyUser" ]]; then
                  WronConf="MySQL user is not valid"
                else
                  FromUser=$MyUser
                fi
              fi
              if [[ -z "$FromPassword" ]]; then
                if [[ -z "$MyPassword" ]]; then
                  WronConf="$WronConf, MySQL password is not valid"
                else
                  FromPassword=$MyPassword
                fi
              fi
              if [[ -z "$FromDB" ]]; then
                if [[ -z "$MyDB" ]]; then
                  WronConf="$WronConf, MySQL database is not valid"
                else
                  FromDB=$MyDB
                fi
              fi
              if [[ -z "$WronConf" ]]; then
                CreateDB=""
                if [[ -z "$MyDB" ]]; then
                  CreateDB="--databases"
                fi
                
                mysqldump -h$FromHost -P$FromPort -udbadmin -p$FromPassword \
                --routines --events --triggers $CreateDB "$FromDB" > dump || true
                
                mysql -uroot -p$MyPassword $MyDB < dump
              else
                echo "MySQL import configuration error(s): $WrongConf"
              fi
            fi
          fi

          # Web service
          echo "Configure Web service - $SiteDir;$ServiceCmd"
          if [[ ! -z "$SiteDir" ]]; then
            mkdir -p /var/www/$SiteDir/

            if [[ ! -z "$ServiceCmd" ]]; then
              echo "[Unit]
              Description=${Project} web service
              After=network.target

              [Service]
              Type=simple
              User=root
              KillSignal=SIGQUIT
              ExecStart=/bin/bash -ce \"exec /usr/bin/node /var/www/$SiteDir/$ServiceCmd >> /var/log/${Project}-service.log 2>&1\"
              StandardOutput=syslog
              StandardError=syslog
              SyslogIdentifier=${Project}
              Restart=always

              [Install]
              WantedBy=multi-user.target" > /etc/systemd/system/${Project}.service

              systemctl enable ${Project}
            fi
          fi

          # Efs
          echo "Setup EFS - $EfsId"
          if [[ ! -z "$EfsId" ]]; then
            apt-get install -y nfs-common 
            mkdir -p /mnt/efs

            echo "$EfsId.efs.${AWS::Region}.amazonaws.com:/ /mnt/efs
              nfs4 nfsvers=4.1,rsize=1048576,wsize=1048576,hard,timeo=600,retrans=2 0 0" >> /etc/fstab
            mount -a -t nfs4
            ln -s /mnt/efs/$EfsPath /files
          fi

          # CloudWatch
          echo "Setup CloudWatch"
          curl https://s3.amazonaws.com/aws-cloudwatch/downloads/latest/awslogs-agent-setup.py -O
          echo "[general]
          state_file = /var/awslogs/state/agent-state

          [/var/log/${Project}-service.log]
          datetime_format = %Y-%m-%d %H:%M:%S
          file = /var/log/${Project}-service.log
          buffer_duration = 5000
          log_stream_name = {instance_id}
          initial_position = start_of_file
          log_group_name = ${Project}
          " > awslogs.conf
          python ./awslogs-agent-setup.py --region=${AWS::Region} -n --configfile=awslogs.conf

          # CodeDeploy
          echo "Setup CodeDeploy"
          mkdir -p /tmp/aws.codedeploy/
          cd /tmp/aws.codedeploy/
          wget https://aws-codedeploy-us-east-1.s3.amazonaws.com/latest/install
          chmod +x ./install
          ./install auto
          service codedeploy-agent start

Outputs:
  UbuntuNode:
    Value: !Ref UbuntuNode
    Export:
      Name: !Sub ${AWS::StackName}
