AWSTemplateFormatVersion: '2010-09-09'
Description: Pipeline Resources

Parameters:
  Project:
    Description: Project name
    Type: String

Resources:
  AutoScalingEventLambda:
    Type: AWS::Lambda::Function
    Properties:
      Handler: index.lambda_handler
      Runtime: python2.7
      Timeout: 30
      Role:
        Fn::ImportValue:
          !Sub ${Project}-eventlambda-role
      Code:
        ZipFile: !Sub |
          import json
          import re
          import boto3
          import botocore
          import traceback

          code_pipeline = boto3.client('codepipeline')
          auto_scaling = boto3.client('autoscaling')
          elb = boto3.client('elbv2')
          ec2 = boto3.client('ec2')
          route53 = boto3.client('route53')
          def lambda_handler(event, context):
            try:
              print 'INPUT:', event

              type = event['detail-type']
              print '[INF] Event:', type
              
              detail = event['detail']
              group = detail['AutoScalingGroupName']
              response = auto_scaling.describe_tags(
                Filters=[{
                  'Name': 'auto-scaling-group',
                  'Values': [group]
                }, {
                  'Name': 'key',
                  'Values': [
                    'codepipeline-job-id',
                    'target-group',
                    'route53-record'
                  ]
                }],
              )

              tags = {}
              for tag in response['Tags']:
                if tag['Key'] == 'route53-record':
                  tags[tag['Key']] = json.loads(tag['Value'])
                else:
                  tags[tag['Key']] = tag['Value']
                if tag['Key'] == 'codepipeline-job-id':
                  response = auto_scaling.delete_tags(
                    Tags=[tag],
                  )

              if re.search(' Successful', type):
                if re.search(' Launch', type):
                  if 'target-group' in tags:
                    elb.register_targets(
                      TargetGroupArn=tags['target-group'],
                      Targets=[{
                        'Id': detail['EC2InstanceId'],
                      }]
                    )
                  if 'route53-record' in tags:
                    info = tags['route53-record']
                    add_53_record(info['zone'], info['record'], detail['EC2InstanceId']);

                if 'codepipeline-job-id' in tags:
                  put_job_success(tags['codepipeline-job-id'], type)
              elif 'codepipeline-job-id' in tags:
                put_job_failure(tags['codepipeline-job-id'], type)

            except Exception as e:
              print('Failed due to exception.') 
              print(e)
              traceback.print_exc()

          def put_job_success(job, message):
            print('Putting job success')
            print(message)
            code_pipeline.put_job_success_result(jobId=job)

          def put_job_failure(job, message):
            print('Putting job failure')
            print(message)
            code_pipeline.put_job_failure_result(jobId=job, failureDetails={'message': message, 'type': 'JobFailed'})

          def add_53_record(zone, record, instance_id):
            response = ec2.describe_instances(InstanceIds = [instance_id])
            dns = response['Reservations'][0]['Instances'][0]['NetworkInterfaces'][0]['Association']['PublicDnsName']
            response = route53.list_hosted_zones_by_name(
              DNSName=zone
            )
            zone_id = response['HostedZones'][0]['Id']
            print 'DNS', dns, 'ZoneId', zone_id
            route53.change_resource_record_sets(
              HostedZoneId=zone_id,
              ChangeBatch={
                'Comment': 'Update record to ec2 instance',
                'Changes': [
                  {
                    'Action': 'UPSERT',
                    'ResourceRecordSet': {
                      'Name': record + '.' + zone,
                      'Type': 'CNAME',
                      'TTL': 300,
                      'ResourceRecords': [
                        {
                          'Value': dns
                        }
                      ]
                    }
                  }
                ]
              }
            )

  AutoScalingGroupRule:
    Type: AWS::Events::Rule
    Properties: 
      Description: String
      EventPattern:
        source:
          - "aws.autoscaling"
        detail-type:
          - "EC2 Instance Launch Successful"
          - "EC2 Instance Launch Unsuccessful"
          - "EC2 Instance Terminate Successful"
          - "EC2 Instance Terminate Unsuccessful"
      State: "ENABLED"
      Targets:
        - 
          Arn: !GetAtt AutoScalingEventLambda.Arn
          Id: "AutoScalingGroupRuleId"

  AutoScalingGroupRulePermissions:
    Type: AWS::Lambda::Permission
    Properties: 
      FunctionName: !Ref AutoScalingEventLambda
      Action: lambda:InvokeFunction
      Principal: events.amazonaws.com
      SourceArn: !GetAtt AutoScalingGroupRule.Arn

  CodeDeployEventLambda:
    Type: AWS::Lambda::Function
    Properties:
      Handler: index.lambda_handler
      Runtime: python2.7
      Timeout: 30
      Role:
        Fn::ImportValue:
          !Sub ${Project}-eventlambda-role
      Code:
        ZipFile: !Sub |
          import re
          import boto3
          import botocore
          import traceback

          def lambda_handler(event, context):
            print 'INPUT:', event

  CodeDeployRule:
    Type: AWS::Events::Rule
    Properties: 
      Description: String
      EventPattern:
        source:
          - "aws.codedeploy"
        detail-type:
          - "CodeDeploy Deployment State-change Notification"
        detail:
          state:
            - "FAILURE"
      State: "ENABLED"
      Targets:
        - 
          Arn: !GetAtt CodeDeployEventLambda.Arn
          Id: "CodeDeployRuleId"

  CodeDeployRulePermissions:
    Type: AWS::Lambda::Permission
    Properties: 
      FunctionName: !Ref CodeDeployEventLambda
      Action: lambda:InvokeFunction
      Principal: events.amazonaws.com
      SourceArn: !GetAtt CodeDeployRule.Arn

  DeploymentRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          -
            Effect: Allow
            Principal:
              Service:
                - codedeploy.amazonaws.com
            Action:
              - sts:AssumeRole
      Path: '/'
      Policies:
        -
          PolicyName: !Sub ${AWS::StackName}-dr-policy
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              -
                Effect: Allow
                Action:
                  - logs:DescribeLogGroups
                  - logs:CreateLogGroup
                  - logs:DeleteLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                  - logs:PutRetentionPolicy
                  - logs:PutSubscriptionFilter
                  - logs:DeleteSubscriptionFilter
                  - s3:GetObject
                  - s3:GetObjectVersion
                  - s3:ListBucket
                  - codedeploy:Batch*
                  - codedeploy:Get*
                  - codedeploy:List*
                  - s3:Get*
                  - s3:List*
                  - autoscaling:CompleteLifecycleAction
                  - autoscaling:DeleteLifecycleHook
                  - autoscaling:DescribeAutoScalingGroups
                  - autoscaling:DescribeLifecycleHooks
                  - autoscaling:PutLifecycleHook
                  - autoscaling:RecordLifecycleActionHeartbeat
                  - autoscaling:CreateAutoScalingGroup
                  - autoscaling:UpdateAutoScalingGroup
                  - autoscaling:EnableMetricsCollection
                  - autoscaling:DescribeAutoScalingGroups
                  - autoscaling:DescribePolicies
                  - autoscaling:DescribeScheduledActions
                  - autoscaling:DescribeNotificationConfigurations
                  - autoscaling:DescribeLifecycleHooks
                  - autoscaling:SuspendProcesses
                  - autoscaling:ResumeProcesses
                  - autoscaling:AttachLoadBalancers
                  - autoscaling:PutScalingPolicy
                  - autoscaling:PutScheduledUpdateGroupAction
                  - autoscaling:PutNotificationConfiguration
                  - autoscaling:PutLifecycleHook
                  - autoscaling:DescribeScalingActivities
                  - autoscaling:DeleteAutoScalingGroup
                  - ec2:DescribeInstances
                  - ec2:DescribeInstanceStatus
                  - ec2:TerminateInstances
                  - tag:GetTags
                  - tag:GetResources
                  - sns:Publish
                  - cloudwatch:DescribeAlarms
                  - cloudwatch:PutMetricAlarm
                  - elasticloadbalancing:DescribeLoadBalancers
                  - elasticloadbalancing:DescribeInstanceHealth
                  - elasticloadbalancing:RegisterInstancesWithLoadBalancer
                  - elasticloadbalancing:DeregisterInstancesFromLoadBalancer
                  - elasticloadbalancing:DescribeTargetGroups
                  - elasticloadbalancing:DescribeTargetHealth
                  - elasticloadbalancing:RegisterTargets
                  - elasticloadbalancing:DeregisterTargets
                Resource: '*'

  CodeDeployApp:
    Type: AWS::CodeDeploy::Application
    Properties:
      ApplicationName: !Ref Project

  DeploymentGroupDev:
    Type: AWS::CodeDeploy::DeploymentGroup
    Properties:
      DeploymentGroupName: !Sub ${Project}-Development
      ApplicationName: !Ref CodeDeployApp
      ServiceRoleArn: !GetAtt DeploymentRole.Arn
      AutoRollbackConfiguration: 
        Enabled: true
        Events:
          - DEPLOYMENT_FAILURE
      AutoScalingGroups:
        - Fn::ImportValue:
            !Sub ${Project}-dev-as-group
      DeploymentConfigName: CodeDeployDefault.OneAtATime      

  DeploymentGroupQA:
    Type: AWS::CodeDeploy::DeploymentGroup
    Properties:
      DeploymentGroupName: !Sub ${Project}-Staging
      ApplicationName: !Ref CodeDeployApp
      ServiceRoleArn: !GetAtt DeploymentRole.Arn
      AutoRollbackConfiguration: 
        Enabled: true
        Events:
          - DEPLOYMENT_FAILURE
      AutoScalingGroups:
        - Fn::ImportValue:
            !Sub ${Project}-qa-as-group
      DeploymentConfigName: CodeDeployDefault.OneAtATime      

  DeploymentGroupProd:
    Type: AWS::CodeDeploy::DeploymentGroup
    Properties:
      DeploymentGroupName: !Sub ${Project}-Production
      ApplicationName: !Ref CodeDeployApp
      ServiceRoleArn: !GetAtt DeploymentRole.Arn
      AutoRollbackConfiguration: 
        Enabled: true
        Events:
          - DEPLOYMENT_FAILURE
      AutoScalingGroups:
        - Fn::ImportValue:
            !Sub ${Project}-prod-as-group
      DeploymentConfigName: CodeDeployDefault.OneAtATime      

  StepFunctionLambdaRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Principal:
            Service:
            - lambda.amazonaws.com
          Action:
          - sts:AssumeRole
      Path: "/"
      Policies:
        - 
          PolicyName: !Sub "${AWS::StackName}-sflr-policy"
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
            - Effect: Allow
              Action:
              - logs:CreateLogGroup
              - logs:CreateLogStream
              - logs:PutLogEvents
              - lambda:InvokeAsync
              - lambda:InvokeFunction
              Resource: "*"

  StepFunctionLambda:
    Type: AWS::Lambda::Function
    Properties:
      Handler: index.lambda_handler
      Runtime: python2.7
      Timeout: 30
      Role: !GetAtt StepFunctionLambdaRole.Arn
      Code:
        ZipFile: !Sub |
          import json
          import boto3
          import botocore

          client = boto3.client('lambda')
          def lambda_handler(event, context):
            params=event
            if isinstance(params, str):
              params=json.loads(params)
            client.invoke(
              FunctionName=params['FunctionName'],
              InvocationType='Event',
              Payload=bytes(json.dumps(params['Payload']).encode('utf-8'))
            )
            return 'Done'

  LambdaDelayMachineRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: "Allow"
            Principal:
              Service:
                - !Sub states.${AWS::Region}.amazonaws.com
            Action: "sts:AssumeRole"
      Path: "/"
      Policies:
        - PolicyName: !Sub ${AWS::StackName}-ldmr-policy
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - lambda:InvokeFunction
                Resource: "*"

  LambdaDelayMachine:
    Type: AWS::StepFunctions::StateMachine
    Properties:
      DefinitionString: !Sub
        - |-
          {
            "Comment": "Delayed lambda running",
            "StartAt": "Wait",
            "States": {
              "Wait": {
                "Type": "Wait",
                "SecondsPath": "$.Delay",
                "Next": "Lambda"
              },
              "Lambda": {
                "Type": "Task",
                "Resource": "${LambdaArn}",
                "End": true
              }
            }
          }
        - {LambdaArn: !GetAtt StepFunctionLambda.Arn}
      RoleArn: !GetAtt LambdaDelayMachineRole.Arn

  ASConfLambdaRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Principal:
            Service:
            - lambda.amazonaws.com
          Action:
          - sts:AssumeRole
      Path: "/"
      Policies:
        - 
          PolicyName: !Sub "${AWS::StackName}-asclr-policy"
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
            - Effect: Allow
              Action:
              - logs:CreateLogGroup
              - logs:CreateLogStream
              - logs:PutLogEvents
              - logs:FilterLogEvents
              - states:ListExecutions
              - states:DescribeExecution
              - states:StartExecution
              - states:StopExecution
              - autoscaling:DescribeAutoScalingInstances
              - autoscaling:SetDesiredCapacity
              - autoscaling:DescribeAutoScalingGroups
              - autoscaling:CreateOrUpdateTags
              - autoscaling:DescribeTags
              - codepipeline:PutJobFailureResult
              - codepipeline:PutJobSuccessResult
              Resource: "*"

  ASConfLambda:
    Type: AWS::Lambda::Function
    Properties:
      Handler: index.lambda_handler
      Runtime: python2.7
      Timeout: 30
      Role: !GetAtt ASConfLambdaRole.Arn
      Code:
        ZipFile: !Sub
          - |
            import json
            import boto3
            import botocore
            import traceback

            c_p=boto3.client('codepipeline')
            a_s=boto3.client('autoscaling')
            s_f=boto3.client('stepfunctions')
            _lmN='${LambdaDelayMachine}'
            def lambda_handler(event, context):
              try:
                # read parameters
                params=event
                if 'CodePipeline.job' in event:
                  job_id=event['CodePipeline.job']['id']
                  params=get_user_params(event['CodePipeline.job']['data'])
                  params['job_id']=job_id
                print 'Params', params
                # remove scheduled task if exists
                rN=params['AutoScalingGroupName']
                unschedule(rN)
                # get as group
                r=a_s.describe_auto_scaling_groups(
                  AutoScalingGroupNames=[
                    params['AutoScalingGroupName'],
                  ],
                )
                group=r['AutoScalingGroups'][0]
                # check if current capacity does not match requested
                capacity=-1
                if params['Action'] == 'stop':
                  if group['DesiredCapacity'] > 0:
                    capacity=0
                else:
                  # run instance if needed
                  if group['DesiredCapacity'] == 0:
                    capacity=1              
                if capacity > -1:
                  # change
                  # collect tags
                  tags=[]
                  if 'Tags' in params:
                    tags=params['Tags']
                  if 'job_id' in params:
                    tags.append({
                        'ResourceId':params['AutoScalingGroupName'],
                        'ResourceType':'auto-scaling-group',
                        'Key':'codepipeline-job-id',
                        'Value':params['job_id'],
                        'PropagateAtLaunch':False
                    })
                  if capacity > 0:
                    if 'TargetGroup' in params:
                      tags.append({
                        'ResourceId':params['AutoScalingGroupName'],
                        'ResourceType':'auto-scaling-group',
                        'Key':'target-group',
                        'Value':params['TargetGroup'],
                        'PropagateAtLaunch':True
                      })
                    if 'Route53' in params:
                      tags.append({
                        'ResourceId':params['AutoScalingGroupName'],
                        'ResourceType':'auto-scaling-group',
                        'Key':'route53-record',
                        'Value':json.dumps(params['Route53']),
                        'PropagateAtLaunch':True
                      })

                  # change
                  if 'Delay' in params:
                    schedule(rN, context.invoked_function_arn, params)
                    if 'job_id' in params:
                      put_job_success(params['job_id'], 'Scheduled')
                  else:
                    print 'change now', capacity
                    # set tags
                    if len(tags):
                      a_s.create_or_update_tags(
                        Tags=tags
                      )
                    # change capacity
                    a_s.set_desired_capacity(
                      AutoScalingGroupName=params['AutoScalingGroupName'],
                      DesiredCapacity=capacity,
                      HonorCooldown=True,
                    )
                else:
                  # nothing to change
                  if 'job_id' in params:
                    put_job_success(params['job_id'], 'Nothing to change')
              except Exception as e:
                print 'Failed due to exception.'
                print(e)
                traceback.print_exc()
                # stop pipeline
                if 'job_id' in params:
                  put_job_failure(job_id, 'Function exception:' + str(e))

            def schedule(job, arn, params):
              delay=params['Delay']
              del params['Delay']
              s_f.start_execution(
                stateMachineArn=_lmN,
                input=json.dumps({
                  'Id': job,
                  'FunctionName': arn,
                  'Delay': delay,
                  'Payload': params
                })
              )
            def unschedule(job):
              r=s_f.list_executions(
                stateMachineArn=_lmN,
                statusFilter='RUNNING'
              )
              for e in r['executions']:
                re=s_f.describe_execution(
                  executionArn=e['executionArn']
                )
                i=json.loads(re['input'])
                if i['Id'] == job:
                  print 'Stop execution'
                  s_f.stop_execution(
                    executionArn=e['executionArn']
                  )
            def get_user_params(job_data):
              user_parameters=job_data['actionConfiguration']['configuration']['UserParameters']
              return json.loads(user_parameters)
            def put_job_success(job, msg):
              print 'Putting job success', msg
              c_p.put_job_success_result(jobId=job)
            def put_job_failure(job, msg):
              print 'Putting job failure', msg
              c_p.put_job_failure_result(jobId=job, failureDetails={'message':msg, 'type':'JobFailed'})
          - {LambdaDelayMachine: !Ref LambdaDelayMachine}

Outputs:
  CodeDeployApp:
    Value: !Ref CodeDeployApp
    Export:
      Name: !Sub ${Project}-deploy-app
  DeploymentGroupDev:
    Value: !Ref DeploymentGroupDev
    Export:
      Name: !Sub ${Project}-deploygroup-dev
  DeploymentGroupQA:
    Value: !Ref DeploymentGroupQA
    Export:
      Name: !Sub ${Project}-deploygroup-qa
  DeploymentGroupProd:
    Value: !Ref DeploymentGroupProd
    Export:
      Name: !Sub ${Project}-deploygroup-prod
  ASConfLambda:
    Value: !Ref ASConfLambda
    Export:
      Name: !Sub ${Project}-asconf-lambda
