AWSTemplateFormatVersion: '2010-09-09'
Description: Pipeline Resources

Parameters:
  Project:
    Description: Project name
    Type: String
  KPUserArn:
    Description: Key policy applied user ARN (arn:aws:iam::ACCOUNTID:root)
    Type: String
    Default: ''

Conditions:
  HasKPUserArn:
    Fn::Not:
    - Fn::Equals:
      - Ref: KPUserArn
      - ''

Resources:
  CodeBuildRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          -
            Effect: Allow
            Principal:
              Service:
                - codebuild.amazonaws.com
            Action:
              - 'sts:AssumeRole'
      Path: '/'
      Policies:
        -
          PolicyName: !Sub ${AWS::StackName}-cbr-policy
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              -
                Effect: Allow
                Action:
                  - logs:DescribeLogGroups
                  - logs:CreateLogGroup
                  - logs:DeleteLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                  - logs:PutRetentionPolicy
                  - s3:*
                  - sns:*
                  - cloudformation:*
                  - ecr:GetAuthorizationToken
                  - ecr:GetDownloadUrlForLayer
                  - ecr:BatchGetImage
                  - ecr:BatchCheckLayerAvailability
                Resource: '*'

  CodePipelineRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          -
            Effect: Allow
            Principal:
              Service:
                - codepipeline.amazonaws.com
                - cloudformation.amazonaws.com
            Action:
              - sts:AssumeRole
      Path: '/'
      Policies:
        -
          PolicyName: !Sub ${AWS::StackName}-cpr-policy
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              -
                Effect: Allow
                Action:
                  - logs:DescribeLogGroups
                  - logs:CreateLogGroup
                  - logs:DeleteLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                  - logs:PutRetentionPolicy
                  - logs:PutSubscriptionFilter
                  - logs:DeleteSubscriptionFilter
                  - s3:*
                  - sns:*
                  - lambda:*
                  - autoscaling:*
                  - cloudformation:*
                  - codebuild:BatchGetBuilds
                  - codebuild:StartBuild
                  - codedeploy:CreateDeployment
                  - codedeploy:GetApplicationRevision
                  - codedeploy:GetDeployment
                  - codedeploy:GetDeploymentConfig
                  - codedeploy:RegisterApplicationRevision
                  - iam:CreateRole
                  - iam:PutRolePolicy
                  - iam:DeleteRole
                  - iam:DeleteRolePolicy
                  - iam:GetRole
                  - iam:PassRole
                Resource: '*'

  PipelineNotificationTopic:
    Type: AWS::SNS::Topic
    Properties: 
      DisplayName: Pipeline notification topic

  PipelineApprovalTopic:
    Type: AWS::SNS::Topic
    Properties: 
      DisplayName: Pipeline approval topic

  PipelineApprovalInternalTopic:
    Type: AWS::SNS::Topic
    Properties: 
      DisplayName: Internal topic for pipeline stages Category=Approval
      Subscription:
        - Endpoint: !GetAtt PipelineNotifyLambda.Arn
          Protocol: lambda

  PipelineApprovalInternalTopicPermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !GetAtt PipelineNotifyLambda.Arn
      Action: lambda:InvokeFunction
      Principal: sns.amazonaws.com
      SourceArn: !Ref PipelineApprovalInternalTopic

  GetPiplineLambdaRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          -
            Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - 'sts:AssumeRole'
      Path: '/'
      Policies:
        -
          PolicyName: !Sub "${AWS::StackName}-pnlr-policy"
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              -
                Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                  - codepipeline:Get*
                  - s3:Get*
                Resource: '*'

  GetPiplineLambda:
    Type: AWS::Lambda::Function
    Properties:
      Handler: index.lambda_handler
      MemorySize: '128'
      Runtime: python2.7
      Timeout: 30
      Role: !GetAtt GetPiplineLambdaRole.Arn
      Code:
        ZipFile: !Sub |
          import json
          import boto3
          import botocore

          code_pipeline = boto3.client('codepipeline')
          s3 = boto3.client('s3')
          s3res = boto3.resource('s3')
          def lambda_handler(event, context):
            pipeline = event['pipeline']
            execution_id = None
            if 'execution-id' in event:
              execution_id = event['execution-id']
            token = None
            if 'token' in event:
              token = event['token']
            retText = False
            if 'ret' in event and event['ret'] == 'text':
              retText = True

            r = code_pipeline.get_pipeline_state(
              name=pipeline
            )
            ret = {
              'Name': pipeline,
              'Stages': []
            }
            for s in r['stageStates']:
              if not 'latestExecution' in s:
                continue
              stage = {
                'Name': s['stageName'],
                'Actions': []
              }
              sle = s['latestExecution']
              for a in s['actionStates']:
                if not 'latestExecution' in a:
                  continue
                ale = a['latestExecution']
                action = {
                  'Name': a['actionName'],
                  'Status': ale['status']
                }
                if 'summary' in ale:
                  action['Details'] = ale['summary']
                if 'errorDetails' in ale:
                  action['Details'] = str(ale['errorDetails'])
                stage['Actions'].append(action)
                if not execution_id and token and 'token' in ale and ale['token'] == token:
                  execution_id = sle['pipelineExecutionId']
              ret['Stages'].append(stage)
              if sle['status'] != 'Succeeded':
                break
            
            if execution_id:
              r = code_pipeline.get_pipeline_execution(
                pipelineName=pipeline,
                pipelineExecutionId=execution_id
              )
              version = r['pipelineExecution']['artifactRevisions'][0]['revisionId']
              # print 'execution', r
              
              r = code_pipeline.get_pipeline(
                name=pipeline
              )
              # print 'get_pipeline', r
              stages = r['pipeline']['stages']
              configuration = stages[0]['actions'][0]['configuration']
              
              tags = s3.get_object_tagging(
                Bucket=configuration['S3Bucket'],
                Key=configuration['S3ObjectKey'],
                VersionId=version
              )
              tags = tags['TagSet']
              meta = {}
              for tag in tags:
                meta[tag['Key']] = tag['Value']
              folder = configuration['S3ObjectKey'].replace('.zip', '')
              key = folder + '/' + meta['reference']
              # print key, meta['version']
              
              obj = s3res.Object(configuration['S3Bucket'], key)
              history = obj.get(VersionId=meta['version'])['Body'].read().decode('utf-8') 
              history = json.loads(history)
              # print 'history', str(history)
              ret['History'] = history

            if retText:
              text = 'Pipeline: ' + ret['Name']
              if execution_id:
                text += '\nExecutionID: ' + execution_id
              for s in ret['Stages']:
                text += '\n' + s['Name']
                for a in s['Actions']:
                  text += '\n\tAction: ' + a['Name']
                  text += '\n\tStatus: ' + a['Status']
                  if 'Details' in a:
                    text += '\n\tDetails: ' + a['Details']
              if 'History' in ret:
                history = ret['History']
                text += '\n\n-----------------------'
                text += '\nChanges in branch "' + history['branch'] + '":'
                for commit in history['commits']:
                  text += '\n-----------------------'
                  text += '\n[Url]: ' + commit['url']
                  text += '\n[Author]: ' + commit['author']
                  text += '\n[Commit message]:'
                  text += '\n' + commit['message']
              ret = text

            return ret

  EventLambdaRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Principal:
            Service:
            - lambda.amazonaws.com
          Action:
          - sts:AssumeRole
      Path: "/"
      Policies:
        - 
          PolicyName: !Sub "${AWS::StackName}-elr-policy"
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
            - Effect: Allow
              Action:
              - logs:CreateLogGroup
              - logs:CreateLogStream
              - logs:PutLogEvents
              - logs:FilterLogEvents
              - autoscaling:DescribeAutoScalingInstances
              - autoscaling:DescribeAutoScalingGroups
              - autoscaling:CreateOrUpdateTags
              - autoscaling:DescribeTags
              - autoscaling:DeleteTags
              - elasticloadbalancing:RegisterTargets
              - ec2:DescribeInstances
              - route53:ListHostedZonesByName
              - route53:ChangeResourceRecordSets
              - codepipeline:GetPipeline
              - codepipeline:GetJobDetails
              - codepipeline:GetPipelineState
              - codepipeline:GetPipelineExecution
              - codepipeline:PutJobFailureResult
              - codepipeline:PutJobSuccessResult
              - s3:Get*
              - sns:Publish
              - lambda:InvokeAsync
              - lambda:InvokeFunction
              Resource: "*"

  CodeBuildEventLambda:
    Type: AWS::Lambda::Function
    Properties:
      Handler: index.lambda_handler
      Runtime: python2.7
      Timeout: 30
      Role: !GetAtt EventLambdaRole.Arn
      Code:
        ZipFile: !Sub |
          import re
          import boto3
          import botocore
          import traceback

          def lambda_handler(event, context):
            print 'INPUT:', event

  CodePipelineEventLambda:
    Type: AWS::Lambda::Function
    Properties:
      Handler: index.lambda_handler
      Runtime: python2.7
      Timeout: 30
      Role: !GetAtt EventLambdaRole.Arn
      Code:
        ZipFile: !Sub |
          import json
          import re
          import boto3
          import botocore
          import traceback

          code_pipeline = boto3.client('codepipeline')
          sns = boto3.client('sns')
          lc = boto3.client('lambda')
          def lambda_handler(event, context):
            try:
              print 'INPUT:', event
              if re.search('codepipeline', event['source']):
                detail = event['detail']
                status = detail['state']
                if status == 'FAILED':
                  subject = '${Project} pipeline ' + detail['pipeline'] + ' has FAILED'
                  message = get_pipeline_info_txt(event)
                  json_message = {
                    'default': message,
                    'email': message,
                    'sms': subject,
                  }
                  send_sns('${PipelineNotificationTopic}', subject, json.dumps(json_message))
                elif status == 'SUCCEEDED':
                  subject = '${Project} pipeline ' + detail['pipeline'] + ' has SUCCEEDED'
                  message = get_pipeline_info_txt(event)
                  json_message = {
                    'default': message,
                    'email': message,
                    'sms': subject,
                  }
                  send_sns('${PipelineNotificationTopic}', subject, json.dumps(json_message))

            except Exception as e:
              print('Failed due to exception.') 
              print(e)
              traceback.print_exc()

          def get_pipeline_info_txt(event):
            detail = event['detail']
            pipeline = detail['pipeline']
            execution_id = detail['execution-id']

            text = 'Status: ' + detail['state']
            text += '\nTime: ' + event['time']

            info = lc.invoke(
              FunctionName='${GetPiplineLambda}',
              InvocationType='RequestResponse',
              Payload=bytes(json.dumps({
                'pipeline': pipeline,
                'execution-id': execution_id,
                'ret': 'text'
              }).encode('utf-8'))
            )
            text += '\n' + json.loads(info['Payload'].read())

            return text

          def send_sns(topic, subject, message):
            response = sns.publish(
                TopicArn=topic,
                Message=message,
                Subject=subject,
                MessageStructure='json',
            )
            print 'SNS sent', response

  CodeBuildRule:
    Type: AWS::Events::Rule
    Properties: 
      Description: String
      EventPattern:
        source:
          - "aws.codebuild"
        detail-type:
          - "CodeBuild Build State Change"
        detail:
          build-status:
            - "FAILED"
            - "SUCCEEDED"
      State: "ENABLED"
      Targets:
        - 
          Arn: !GetAtt CodeBuildEventLambda.Arn
          Id: "CodeBuildRuleId"

  CodeBuildRulePermissions:
    Type: AWS::Lambda::Permission
    Properties: 
      FunctionName: !Ref CodeBuildEventLambda
      Action: lambda:InvokeFunction
      Principal: events.amazonaws.com
      SourceArn: !GetAtt CodeBuildRule.Arn

  CodePipelineRule:
    Type: AWS::Events::Rule
    Properties: 
      Description: String
      EventPattern:
        source:
          - "aws.codepipeline"
        detail-type:
          - "CodePipeline Pipeline Execution State Change"
        detail:
          state:
            - "FAILED"
            - "SUCCEEDED"
      State: "ENABLED"
      Targets:
        - 
          Arn: !GetAtt CodePipelineEventLambda.Arn
          Id: "CodePipelineRuleId"

  CodePipelineRulePermissions:
    Type: AWS::Lambda::Permission
    Properties: 
      FunctionName: !Ref CodePipelineEventLambda
      Action: lambda:InvokeFunction
      Principal: events.amazonaws.com
      SourceArn: !GetAtt CodePipelineRule.Arn

  KMS:
    Type: AWS::KMS::Key
    Properties:
      KeyPolicy:
        Version: 2012-10-17
        Id: key-default-1
        Statement:
          - Sid: Allow administration of the key
            Effect: Allow
            Principal:
              AWS:
                Fn::If:
                - HasKPUserArn
                - Ref: KPUserArn
                - Fn::Sub: arn:aws:iam::${AWS::AccountId}:root
            Action:
              - kms:Create*
              - kms:Describe*
              - kms:Enable*
              - kms:List*
              - kms:Put*
              - kms:Update*
              - kms:Revoke*
              - kms:Disable*
              - kms:Get*
              - kms:Delete*
              - kms:ScheduleKeyDeletion
              - kms:CancelKeyDeletion
            Resource: "*"
          - Sid: Allow use of the key
            Effect: Allow
            Principal:
              AWS: !GetAtt PipelineNotifyLambdaRole.Arn
            Action:
              - kms:Encrypt
              - kms:Decrypt
            Resource: "*"
          - Sid: Allow use of the key
            Effect: Allow
            Principal:
              AWS: !GetAtt WebHookLambdaRole.Arn
            Action:
              - kms:Encrypt
              - kms:Decrypt
            Resource: "*"

  PipelineNotifyLambdaRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          -
            Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - 'sts:AssumeRole'
      Path: '/'
      Policies:
        -
          PolicyName: !Sub "${AWS::StackName}-pnlr-policy"
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              -
                Effect: Allow
                Action:
                  - logs:DescribeLogGroups
                  - logs:CreateLogGroup
                  - logs:DeleteLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                  - logs:PutRetentionPolicy
                  - sns:Publish
                  - codepipeline:PutJobFailureResult
                  - lambda:InvokeAsync
                  - lambda:InvokeFunction
                Resource: '*'

  PipelineNotifyLambda:
    Type: AWS::Lambda::Function
    Properties:
      Handler: index.lambda_handler
      MemorySize: '128'
      Runtime: python2.7
      Timeout: 30
      Role: !GetAtt PipelineNotifyLambdaRole.Arn
      Code:
        ZipFile: !Sub |
          import json
          import boto3
          import botocore
          import traceback
          import base64
          import urllib

          code_pipeline = boto3.client('codepipeline')
          kms = boto3.client('kms')
          sns = boto3.client('sns')
          lc = boto3.client('lambda')
          def lambda_handler(event, context):
            try:
              message = event['Records'][0]['Sns']['Message']
              message = json.loads(message)
              approval = message['approval']
              url = get_url({
                'pipelineName': approval['pipelineName'],
                'stageName': approval['stageName'],
                'actionName': approval['actionName'],
                'token': approval['token'],
              })
              
              subject = '[${Project}]: New version is wating for approval'
              emailMessage = 'Hey!'
              emailMessage += '\n' + approval['customData']
              emailMessage += '\n\n' + get_pipeline_info_txt(approval['pipelineName'], approval['token'])
              emailMessage += '\n\n--'
              emailMessage += '\nTo try goto\n' + approval['externalEntityLink']
              emailMessage += '\nTo approve or reject goto\n' + url
              emailMessage += '\nOr use AWS console\n' + approval['approvalReviewLink']
              json_message = {
                'default': 'To approve/reject new version click ' + url,
                'email': emailMessage,
                'sms': subject,
              }
              send_sns('${PipelineApprovalTopic}', subject, json.dumps(json_message))
            except Exception as e:
              print('Failed due to exception.')
              print(e)

          def get_url(data):
            data = json.dumps(data)
            data = encrypt_string(data)
            url = 'https://${WebHookApi}.execute-api.${AWS::Region}.amazonaws.com/'
            url += '${WebHookApiProdStage}/'
            url += urllib.quote_plus(data)
            return url

          def get_pipeline_info_txt(pipeline, token):
            r = lc.invoke(
              FunctionName='${GetPiplineLambda}',
              InvocationType='RequestResponse',
              Payload=bytes(json.dumps({
                'pipeline': pipeline,
                'token': token,
                'ret': 'text'
              }).encode('utf-8'))
            )
            return json.loads(r['Payload'].read())

          def encrypt_string(what):
            response = kms.encrypt(KeyId='${KMS}', Plaintext=what)
            binary_encrypted = response[u'CiphertextBlob']
            base64_encrypted = base64.b64encode(binary_encrypted)
            return base64_encrypted.decode()

          def send_sns(topic, subject, message):
            response = sns.publish(
                TopicArn=topic,
                Subject=subject,
                MessageStructure='json',
                Message=message,
            )
            print 'SNS sent', response

  WebHookLambdaRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          -
            Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - 'sts:AssumeRole'
      Path: '/'
      Policies:
        -
          PolicyName: !Sub "${AWS::StackName}-whlr-policy"
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              -
                Effect: Allow
                Action:
                  - logs:DescribeLogGroups
                  - logs:CreateLogGroup
                  - logs:DeleteLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                  - logs:PutRetentionPolicy
                  - iam:GetRole
                  - sns:Publish
                  - codepipeline:GetPipeline
                  - codepipeline:GetJobDetails
                  - codepipeline:GetPipelineState
                  - codepipeline:PutApprovalResult
                Resource: '*'

  WebHookLambda:
    Type: AWS::Lambda::Function
    Properties:
      Handler: index.lambda_handler
      MemorySize: '128'
      Runtime: python2.7
      Timeout: 30
      Role: !GetAtt WebHookLambdaRole.Arn
      Code:
        ZipFile: !Sub |
          import json
          import boto3
          import botocore
          import traceback
          import base64
          import urllib

          code_pipeline = boto3.client('codepipeline')
          kms = boto3.client('kms')
          def lambda_handler(event, context):
            try:
              action_encoded = event['pathParameters']['actionEncoded']
              action_encoded = urllib.unquote_plus(action_encoded)
              action = descrypt_string(action_encoded)
              stageInfo = json.loads(action)

              if not event['body']:
                return {
                  'statusCode': 200,
                  'headers': {'Content-Type': 'text/html'},
                  'body': ' \
                  <html> \
                    <link rel="stylesheet" href="https://maxcdn.bootstrapcdn.com/bootstrap/4.0.0/css/bootstrap.min.css"> \
                    <body> \
                      <form method=post encrypt="application/x-www-form-urlencoded"> \
                        <div class="modal" tabindex="-1" role="dialog" style="display: block;"> \
                          <div class="modal-dialog" role="document"> \
                            <div class="modal-content"> \
                              <div class="modal-header"> \
                                <h5 class="modal-title">Resolution</h5> \
                              </div> \
                              <div class="modal-body"> \
                                <div class="form-group"> \
                                  <textarea class="form-control" name="message" rows="3" required></textarea> \
                                </div> \
                              </div> \
                              <div class="modal-footer"> \
                                <button type="submit" name="resolution" value="REJECTED" class="btn btn-danger">Reject</button> \
                                <button type="submit" name="resolution" value="APPROVED" class="btn btn-primary">Approve</button> \
                              </div> \
                            </div> \
                          </div> \
                        </div> \
                      </form> \
                    </body> \
                  </html> \
                '}

              params = {x[0] : urllib.unquote_plus(x[1]).decode('utf8') for x in [x.split("=") for x in event['body'].split("&") ]}
              if not params['message'] or not params['resolution']:
                return {'statusCode': 401, 'body': 'Bad parameters'}

              if params['resolution'] == 'APPROVED':
                put_approval_result(stageInfo, 'Approved', params['message'])
              elif params['resolution'] == 'REJECTED':
                put_approval_result(stageInfo, 'Rejected', params['message'])
              else:
                return {'statusCode': 401, 'body': 'Bad parameters'}

              return {'statusCode': 200, 'body': params['resolution']}
            except Exception as e:
              print('Failed due to exception.')
              print(e)
              return {'statusCode': 500, 'body': 'Error ecccorred ' + str(e)}

          def descrypt_string(what):
            binary_data = base64.b64decode(what)
            meta = kms.decrypt(CiphertextBlob=binary_data)
            plaintext = meta[u'Plaintext']
            return plaintext.decode()

          def put_approval_result(info, status, message):
            print 'Putting', status, message
            code_pipeline.put_approval_result(
              pipelineName=info['pipelineName'],
              stageName=info['stageName'],
              actionName=info['actionName'],
              result={
                'summary': message,
                'status': status
              },
              token=info['token']
            )

  WebHookRole:
    Type: 'AWS::IAM::Role'
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service: apigateway.amazonaws.com
            Action: 'sts:AssumeRole'
      Path: /
      ManagedPolicyArns:
        - >-
          arn:aws:iam::aws:policy/service-role/AmazonAPIGatewayPushToCloudWatchLogs
      Policies:
        - PolicyName: !Sub ${AWS::StackName}-whr-policy
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - lambda:InvokeAsync
                  - lambda:InvokeFunction
                Resource:
                  - !GetAtt WebHookLambda.Arn

  WebHookApi:
    Type: 'AWS::ApiGateway::RestApi'
    Properties:
      Name: !Ref 'AWS::StackName'
      Description: !Sub ${Project} pipeline api
      Body:
        swagger: '2.0'
        info:
          version: '1.0'
          title: !Ref 'AWS::StackName'
        schemes:
          - https
        paths:
          /{actionEncoded}:
            get:
              x-amazon-apigateway-integration:
                responses:
                  default:
                    statusCode: '200'
                uri: !Join
                  - ''
                  - - 'arn:aws:apigateway:'
                    - !Ref 'AWS::Region'
                    - ':lambda:path/2015-03-31/functions/'
                    - !GetAtt WebHookLambda.Arn
                    - /invocations
                passthroughBehavior: when_no_match
                httpMethod: POST
                credentials: !GetAtt WebHookRole.Arn
                type: aws_proxy
            post:
              x-amazon-apigateway-integration:
                responses:
                  default:
                    statusCode: '200'
                uri: !Join
                  - ''
                  - - 'arn:aws:apigateway:'
                    - !Ref 'AWS::Region'
                    - ':lambda:path/2015-03-31/functions/'
                    - !GetAtt WebHookLambda.Arn
                    - /invocations
                passthroughBehavior: when_no_match
                httpMethod: POST
                credentials: !GetAtt WebHookRole.Arn
                type: aws_proxy

  WebHookApiDeployment:
    Type: 'AWS::ApiGateway::Deployment'
    Properties:
      RestApiId: !Ref WebHookApi

  WebHookApiProdStage:
    Type: 'AWS::ApiGateway::Stage'
    Properties:
      DeploymentId: !Ref WebHookApiDeployment
      RestApiId: !Ref WebHookApi
      StageName: v1

Outputs:
  CodeBuildRole:
    Value: !GetAtt CodeBuildRole.Arn
    Export:
      Name: !Sub ${Project}-codebuild-role
  EventLambdaRole:
    Value: !GetAtt EventLambdaRole.Arn
    Export:
      Name: !Sub ${Project}-eventlambda-role
  CodePipelineRole:
    Value: !GetAtt CodePipelineRole.Arn
    Export:
      Name: !Sub ${Project}-codepipeline-role
  PipelineApprovalInternalTopic:
    Value: !Ref PipelineApprovalInternalTopic
    Export:
      Name: !Sub ${Project}-approval-i-topic
